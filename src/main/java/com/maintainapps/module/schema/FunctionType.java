//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.12.05 at 12:04:53 PM GST 
//


package com.maintainapps.module.schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for functionType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="functionType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;group ref="{http://bayan.ir}functions" maxOccurs="unbounded"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "functionType", propOrder = {
    "functions"
})
@XmlSeeAlso({
    ConcatType.class,
    DefaultType.class
})
public class FunctionType {

    @XmlElements({
        @XmlElement(name = "expr", type = ExprType.class),
        @XmlElement(name = "constant", type = ConstantType.class),
        @XmlElement(name = "concat", type = ConcatType.class),
        @XmlElement(name = "replace", type = ReplaceType.class),
        @XmlElement(name = "trim", type = TrimType.class),
        @XmlElement(name = "truncate", type = TruncateType.class),
        @XmlElement(name = "text", type = TextType.class),
        @XmlElement(name = "raw", type = RawType.class),
        @XmlElement(name = "attribute", type = AttributeType.class),
        @XmlElement(name = "first", type = FirstType.class),
        @XmlElement(name = "last", type = LastType.class),
        @XmlElement(name = "size", type = SizeType.class),
        @XmlElement(name = "url", type = UrlType.class),
        @XmlElement(name = "resolve", type = ResolveType.class),
        @XmlElement(name = "link", type = LinkType.class),
        @XmlElement(name = "for-each", type = ForEachType.class),
        @XmlElement(name = "fetch", type = FetchType.class),
        @XmlElement(name = "field-value", type = FieldValueType.class),
        @XmlElement(name = "decode", type = DecodeType.class),
        @XmlElement(name = "default", type = DefaultType.class),
        @XmlElement(name = "process", type = ProcessType.class)
    })
    protected List<Object> functions;

    /**
     * Gets the value of the functions property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the functions property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFunctions().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ExprType }
     * {@link ConstantType }
     * {@link ConcatType }
     * {@link ReplaceType }
     * {@link TrimType }
     * {@link TruncateType }
     * {@link TextType }
     * {@link RawType }
     * {@link AttributeType }
     * {@link FirstType }
     * {@link LastType }
     * {@link SizeType }
     * {@link UrlType }
     * {@link ResolveType }
     * {@link LinkType }
     * {@link ForEachType }
     * {@link FetchType }
     * {@link FieldValueType }
     * {@link DecodeType }
     * {@link DefaultType }
     * {@link ProcessType }
     * 
     * 
     */
    public List<Object> getFunctions() {
        if (functions == null) {
            functions = new ArrayList<Object>();
        }
        return this.functions;
    }

}
